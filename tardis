#!/bin/bash

TARDIS_HOME=$(dirname $(readlink -nf $0))

RUNDIR="."
NGENS=""
NBATCHES=""
AFILE="aln.fa"
DFILE="jc.distance.precalc.rds"
MFILE="metadata.csv"
OUTDIR=""
MODE="GA"
DEBUG=""
CONFS=""
SHINY="N"
GROUPFILE=""
PROF="local"
LOGFILE="tardis-$(date -Iminutes).txt"
# Colors are fun...
B='\033[1;34m'
Y='\033[1;33m'
R='\033[1;31m'
N='\033[0m'

usage() {
    echo -e "${Y}T${B}emporal ${Y}A${B}nd dive${Y}R${B}sity ${Y}Di${B}istribution ${Y}S${B}ampler - ${Y}TARDiS${N}"
    echo
    echo "Usage: tardis [options] DATASET"
    echo 
    echo "where DATASET is the dataset name. The program assumes that the run directory (RDIR)"
    echo "contains a configuration file called DATASET.config, and a subdirectory called data/,"
    echo "containing in turn a subdirectory named after the dataset. The three files indicated"
    echo "by the -a, -d, and -m options should be located in that directory."
    echo
    echo "Options:"
    echo
    echo " -s        | Enable Shiny GUI (all other options ignored)"
    echo " -g GROUPS | Enable groups mode"
    echo " -b NBATCH | Number of batches (default: $NBATCHES)"
    echo " -r RDIR   | Set run directory (default: current directory)" 
    echo " -n NGENS  | Set number of generations for GA (defaut: $NGENS)"
    echo " -a AFILE  | Name of alignment file (default: $AFILE)"
    echo " -d DFILE  | Name of distances file (default: $DFILE)"
    echo " -m MFILE  | Name of metadata file (default: $MFILE)"
    echo " -o ODIR   | Name of output directory (default: output/dataset)"
    echo " -p PROF   | Profile name, possible values: local, small, medium, large (default: $PROF)"
    echo " -x        | Enable debug mode (will not delete intermediate files)"
    echo " -v        | Display version number and copyright notice"
    echo
}

# Make R available in your environment, if using modules
if command -v module &> /dev/null
then
  module load R
fi  

# Check that required external programs are available
for prog in Rscript nextflow;
do
  if ! command -v $prog &> /dev/null
  then 
    echo "Warning: $prog not found in path!"
    exit 1
  fi
done

# Parse command-line options
  while getopts ":g:p:b:r:n:a:d:m:o:xshv" opt; do
	case ${opt} in
	    s )
		SHINY="Y"
		;;
	    g )
		GROUPFILE=$OPTARG
		;;
	    b )
		NBATCHES="--nbatches $OPTARG"
		;;
	    r )
		RUNDIR=$OPTARG
		;;
	    n ) 
		NGENS="--ngenerations $OPTARG"
		;;
	    a )
		AFILE=$OPTARG
		;;
	    d )
		DFILE=$OPTARG
		;;
	    m )
		MFILE=$OPTARG
		;;
	    o )
		OUTDIR=$OPTARG
		;;
	    p )
		PROF=$OPTARG
		;;
	    x )
		DEBUG="y"
		;;
	    b )
		MODE="BF"
		;;
	    v )
		echo -e ${B}
		echo H4sIALuOCF8AA7VVUZLDIAj95zQGFZrjtDbe/wiLmzpGo4Z0docxOIjPByhBg1p5m2dtgZlzknbDR4KPPkL6FOGwj1Yw9EBgx78jBeZAm0OZe+cWj87R6q2sEBprcLPr8VwO0KGj5gB9QgV95+MNRQq0kiVf4PNmcXBIkR95i4aRKmG9TCdG3TofU1fbaxho3Mt5F/YEczo5uyedx8gOPTpaGGgXZjAteZhHNYcBbXKGpaqjSVckz9oop6U6a4pjmGGpNBVXlGoMA3dy3GoYR3sNA7NkqUp17zkMS/WHr+pKK19VX59u2H+9qtdXDVDk1ULlmB9kUf4FFu3vQDF7TxutTOQZ2crMsXhI76Yjq+p340gae2SU5u5oEQiUzdLmaRGbJenp4hE5Acs6OxDHSJsmwrP0Y5YIzRN+AAWDMfD4BwAA|base64 -d|zcat|xxd -r -p
		echo -e ${N}
		exit 222
		;;
	    
	    h )
		usage
		exit 0
		;;
	    \? )
		echo "Invalid option: $OPTARG"
		usage
		exit 1
		;;
	    : )
		echo "Invalid option: $OPTARG requires an argument."
		usage
		exit 1
		;;
	esac
    done

  shift $((OPTIND - 1))

  if [[ "$GROUPFILE" == "" ]];
  then
    CONF=$1
    DATASET=$(basename ${CONF%.config})

    if [ ! -f $CONF ];
    then
      echo "Configuration file $CONF not found!"
      exit 1
    fi
    INDIR=$(dirname $(readlink -f $CONF))
    echo Configuration file found: $CONF
    echo Dataset: $DATASET
  else
    INDIR=$(readlink -f ${RUNDIR})
  fi

  # Check that the input directory exists.
  if [ ! -d $INDIR ];
  then
    echo "Directory $INDIR not found!"
    exit 2
  fi
  echo Dataset directory: $INDIR
  if [ ! -f $INDIR/$AFILE ];
  then
    echo "Alignments file $INDIR/$AFILE not found!"
    exit 2
  fi
  if [ ! -f $INDIR/$MFILE ];
  then
    echo "Metadata file $INDIR/$MFILE not found!"
    exit 2
  fi
  if [[ ! -f $INDIR/$DFILE && "$GROUPFILE" == "" ]];
  then
    echo "Distances file $INDIR/$DFILE not found - generating..."
    echo Rscript ${TARDIS_HOME}/bin/JC.pairwise.dist.R -i $INDIR/$AFILE -d $INDIR/$DFILE
    Rscript ${TARDIS_HOME}/bin/JC.pairwise.dist.R -i $INDIR/$AFILE -d $INDIR/$DFILE 2>$LOGFILE
  fi
  echo Data directory found: $INDIR
  
  if [ "$OUTDIR" == "" ];
  then
    OUTDIR=output/${DATASET}
  fi
  mkdir -p $OUTDIR
  echo Output directory: $OUTDIR
  #rm -f ${OUTDIR}/*

  echo

test_shiny() {
  if [ "$SHINY" == "Y" ];
  then
    echo "Starting Shiny interface, use Ctrl-c to quit."
    Rscript -e "shiny::runApp(\"${TARDIS_HOME}/shiny_local/app.R\", launch.browser = TRUE)"
    exit
  fi
}

main_single() {
  FASTAS=""

  if [ "$MODE" == "BF" ];
  then
    echo "*** Executing Brute Force method..."
    Rscript ${TARDIS_HOME}/bin/brute.force.R -s $DATASET -d $INDIR/$DFILE -m $INDIR/$MFILE
    echo "*** Brute Force done."
  else
    echo "*** Executing GA method..."
    if [[ "$DEBUG" == "y" ]];
    then
      echo nextflow run ${TARDIS_HOME}/tardis.nf -c $CONF -N ${USER}@ufl.edu -profile $PROF \
             --distances $INDIR/$DFILE --metadata $INDIR/$MFILE $NGENS $NBATCHES \
             --outdir $OUTDIR --afile $INDIR/$AFILE
    fi
    nextflow run ${TARDIS_HOME}/tardis.nf -c $CONF -N ${USER}@ufl.edu -profile $PROF \
             --distances $INDIR/$DFILE --metadata $INDIR/$MFILE $NGENS $NBATCHES \
             --outdir $OUTDIR --afile $INDIR/$AFILE

    Rscript ${TARDIS_HOME}/bin/print.results.R -s $DATASET -d $INDIR/$DFILE --metadata $INDIR/$MFILE --out.dir $OUTDIR >& R.log
    echo "*** GA done."
    echo
  fi
  
  echo
  
  if [ "$DEBUG" != "y" ];
  then
    rm -rf work
    rm -f $OUTDIR/${MODE}.*.fitness.csv $OUTDIR/${MODE}.*.subsamples.csv
  fi
  
  echo -e "${R}*** Final results:"
  for f in $OUTDIR/subsample.${MODE}.${DATASET}.*.fa;
    do 
      echo "  " $f
  done
  if [ -f "$OUTDIR/example.per.gen.stats.png" ];
  then
    echo
    echo "Fitness statistics plot: $OUTDIR/example.per.gen.stats.png"
  fi
  echo -e $N
}

main_groups() {
  CONFIGS=""
  NOCONFIGS=""

  for path in $(Rscript $TARDIS_HOME/bin/split.groups.R --genome.file $INDIR/$AFILE --metadata $INDIR/$MFILE --base.dir $RUNDIR --group.parameters $GROUPFILE 2>$LOGFILE);
    do
      echo $path
      case $path in
	  *.config)
	      CONFIGS="$CONFIGS $path"
	      ;;
	  *)
	      NOCONFIGS="$NOCONFIGS $path"
      esac
  done

  echo Configs: $CONFIGS
  echo No configs: $NOCONFIGS
  
  if [[ "$CONFIGS" != "" ]];
  then
  for conf in $CONFIGS;
    do
      gprof=$(grep ^profile $conf | cut -d = -f 2 | tr -d \" )
      if [[ "$gprof" != "" ]];
      then
        gprof="-p $gprof"
      fi
      if [[ "$DEBUG" == "y"]];
      then
        echo $0 -r $RUNDIR -a aln.fa -m metadata.csv -d $DFILE -o $OUTDIR $gprof $conf
      fi
      $0 -r $RUNDIR -a aln.fa -m metadata.csv -d $DFILE -o $OUTDIR $grpof $conf
  done
  fi

  # Now combine output files
  mkdir -p ${OUTDIR}/by.group
  mv ${OUTDIR}/* ${OUTDIR}/by.group 2>/dev/null
  cat ${OUTDIR}/by.group/subsample.GA.*.1.fa > ${OUTDIR}/subsample.GA.final.fa

  if [[ "$NOCONFIGS" != "" ]];
  then
  for nd in $NOCONFIGS;
  do
    cat ${nd}/aln.fa >> ${OUTDIR}/subsample.GA.final.fa
  done
  fi
}

# Entry point

test_shiny			# this exits if successful

if [ "$GROUPFILE" == "" ];
then
  main_single
else
  main_groups
fi

